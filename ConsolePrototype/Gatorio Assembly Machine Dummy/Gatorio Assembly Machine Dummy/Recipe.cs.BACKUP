using System;
using System.Collections.Generic;
using System.Linq;

namespace Gatorio_Assembly_Machine_Dummy
{
    public class Recipe : IComparable<Recipe>
    {
        private static List<Item> nonSelfCraftableItems; // Which items can't be crafted by the player?
        private static List<Recipe> myRecipes;


        private List<Item> ingredients;
        private Item product;
        private Dictionary<Item, int> basicIngredients;

        
        public List<Item> NonSelfCraftableItems => nonSelfCraftableItems;
        public static List<Recipe> MyRecipes => myRecipes;
        public List<Item> Ingredients => ingredients;
        public Item Product => product;
        
        public Recipe(List<Item> ingredients, Item product)
        {
            if (myRecipes == null)
            {
                myRecipes = new List<Recipe>();
                nonSelfCraftableItems = new List<Item>();
            }
            
            if (ingredients != null && product != Item.None)
            {
                if (myRecipes.FirstOrDefault(r => r.product == product) == null)
                {
                    basicIngredients = new Dictionary<Item, int>();
                    this.ingredients = ingredients;
                    this.ingredients.Sort();
                    this.product = product;
                    
                    myRecipes.Add(this);
                    myRecipes.Sort();
                }
                else
                {
                    throw new ArgumentException($"Rezept für das Endprodukt {this.product.ToString()} bereits vorhanden!");
                }
            }
            else
            {
                throw new ArgumentException("Rezept muss mindestens eine Zutat und ein Endprodukt enthalten!");
            }
        }

        public static void DeclareItemsNotSelfCraftable(params Item[] myItems)
        {
            if (myItems.Length > 0)
            {
                foreach (var item in myItems)
                {
                    if (!nonSelfCraftableItems.Contains(item))
                    {
                        nonSelfCraftableItems.Add(item);
                    }
                }
                nonSelfCraftableItems = nonSelfCraftableItems.OrderBy(item => item.ToString()).ToList();
            }
        }

        public static Recipe GetRecipeFor(Item product)
        {
            Recipe recipeForItem = myRecipes.FirstOrDefault(r => r.product == product);
            if (recipeForItem != null && !nonSelfCraftableItems.Contains(product))
            {
                // Item has a recipe ...
                return recipeForItem;
            }
            // ... or not (basic ingredient)
            return null;
        }

        /*
        public static void ParseAllRecipesForBasicIngredients()
        {
            foreach (var recipe in myRecipes)
            {
                CalculateBasicItems();
            }
        }
        */

        public void WriteBasicRecipe()
        {
            string basicItemList = product + ": ";

            List<string> individualIngredients = new List<string>();
            foreach (var basicIngredient in basicIngredients)
            {
                individualIngredients.Add(basicIngredient.Value + "x " + basicIngredient.Key);
            }
            basicItemList += String.Join(',', individualIngredients).Replace(",", ", ");
            
            Console.WriteLine(basicItemList);
        }
        
        public void CalculateBasicItems(params Dictionary<Item, int>[] parentIngredients)
        {
            foreach (var ingredient in ingredients)
            {
                Recipe subRecipe = GetRecipeFor(ingredient);
                if (subRecipe == null && !nonSelfCraftableItems.Contains(ingredient)) // Ingredient has no further recipe
                {
                    foreach (var dict in parentIngredients)
                    {
                        InsertInDictionary(ingredient, dict);
                    }
                    InsertInDictionary(ingredient, basicIngredients);
                }
                else // Ingredient has a sub-recipe
                {
                    parentIngredients = parentIngredients.Append(basicIngredients).ToArray();
                    subRecipe.CalculateBasicItems(parentIngredients);
                }
            }
        }

        private void InsertInDictionary(Item ingredient, Dictionary<Item, int> parentIngredients)
        {
            if (parentIngredients.ContainsKey(ingredient)) // Is the ingredient already in our dictionary?
            {
                parentIngredients[ingredient]++;
            }
            else // If not, create a key and start value
            {
                parentIngredients.Add(ingredient, 1);
            }
        }

        public static void PrintRecipes()
        {
            Console.WriteLine("Rezepte: ");

            foreach (Recipe recipe in myRecipes)
            {
                string itemString = recipe.product + " = ";
                itemString += String.Join('+', recipe.ingredients).Replace("+", " + ");
                Console.WriteLine(itemString);
            }
            Console.WriteLine();

            if (nonSelfCraftableItems.Count > 0)
            {
                Console.WriteLine("Nicht selbst herstellbare Zutaten: ");
                string itemString = "";
                itemString += String.Join(',', nonSelfCraftableItems).Replace(",", ", ");
                Console.WriteLine(itemString);
            }
            
            Console.WriteLine();
        }

        public int CompareTo(Recipe other)
        {
            return String.Compare(this.product.ToString(), other.product.ToString(), StringComparison.OrdinalIgnoreCase);
        }
    }
}